// Sphere from a  partir d'un icosahedron
// Guillaume Vergez. 
load "msh3"
load "medit" 
load "tetgen"
load "freeyams"


func mesh3 Ellipsoide20 (real RX,real RY, real RZ,real hsize,int L,int orientation)
{
//===================================================================================
//Angles utiles
//===================================================================================
real tan3pi10 = sqrt(25.+10.*sqrt(5.))/5.;//3pi/10 angle entre deux aretes du pentagone
real sin3pi10 = (sqrt(5)+1)/4;//3pi/10 angle entre deux aretes du pentagone
real cos3pi10 = sqrt(10-2*sqrt(5))/4;//3pi/10 angle entre deux aretes du pentagone

real cosdiedre = sqrt(5)/3; //angle diedre de l'icosaedre -pi/2
real sindiedre = 2./3; //angle diedre de l'icosaedre -pi/2

real cosico = tan3pi10/sqrt(3); //angle entre une face de la pyramide pentagonale par rapport à l'horizontale
real sinico = sqrt(1-square(cosico)); //angle entre une face de la pyramide pentagonale par rapport à l'horizontale

real sin2pi5 = sqrt(10+2*sqrt(5))/4; //2pi/5 angle pour la rotation des aretes du pentagone
real cos2pi5 = (sqrt(5)-1)/4; //2pi/5 angle pour la rotation des aretes du pentagone

real cosicod = cosdiedre*cosico+sindiedre*sinico;//angle diedre -pi/2 - ico
real sinicod = sindiedre*cosico-cosdiedre*sinico;//angle diedre -pi/2 - ico


real sinpi3 = sqrt(3)/2; //angle du triangle equilateral

int n = max(RZ,max(RX,RY))*2*pi/6/hsize;

real sinpi5 = cos3pi10;//pi/5 angle de décalage entre deux demi icosaedre
real cospi5 = sin3pi10;//pi/5 angle de décalage entre deux demi icosaedre

real tanpi10 = sqrt(25.-10.*sqrt(5.))/5.;//pi/10 
real h = 0.5*sqrt(3-square(tanpi10));//hauteur du prisme d'ordre 5;

//=================================================================================
//Construction du triangle equilateral en 2D
//=================================================================================
border a(t=0,1){x=t; y=0; label =1;};
border b(t=1,0.5){x=t; y=sqrt(3)*(1-t); label =2;};
border c(t=0.5,0){x=t; y=sqrt(3)*(t); label =3;};
mesh Triangle= buildmesh(a(n)+b(n)+c(n)); //traingle equilateral


func f = 1;
int[int]  ref=[0,1]; 

mesh3 Triangle3 = movemesh23(Triangle,transfo=[x,0,y],label=ref);//trianglesup
mesh3 TriangleS = movemesh3(Triangle3,transfo=[x,sinico*y+cosico*z,-cosico*y+sinico*z],label=ref);//rotation de -(pi - diedre) par rapport à l'axe des x pour former une face de la pyramide pentagonale

//medit("face pyramide pentagonale",TriangleS);

mesh3 TriangleI = movemesh3(TriangleS,transfo=[x,-cosdiedre*y+sindiedre*z,-sindiedre*y-cosdiedre*z],orientation=-orientation,label=ref);//triangle inf rotation de l'angle diedre par rapport au triangle sup
mesh3 Triangles = TriangleI+TriangleS;

//medit("face pyramide pentagonale + face antiprisme d'ordre 5",Triangles);

mesh3 T1 = movemesh3(Triangles,transfo=[x-0.5,y-sinpi3*cosico,z],label=ref);//translation pour que la figure soit sur le bord du pentagone

mesh3 T2 = movemesh3(T1,transfo=[cos2pi5*x-sin2pi5*y,sin2pi5*x+cos2pi5*y,z],label=ref);
mesh3 T3 = movemesh3(T2,transfo=[cos2pi5*x-sin2pi5*y,sin2pi5*x+cos2pi5*y,z],label=ref);
mesh3 T4 = movemesh3(T3,transfo=[cos2pi5*x-sin2pi5*y,sin2pi5*x+cos2pi5*y,z],label=ref);
mesh3 T5 = movemesh3(T4,transfo=[cos2pi5*x-sin2pi5*y,sin2pi5*x+cos2pi5*y,z],label=ref);

mesh3 Tdemi= T1+T2+T3+T4+T5;//moitié de l'icosaedre


mesh3 Tdemi0 = movemesh3(Tdemi,transfo=[x,y,z+0.5*h],label=ref);//moitié supérieure
mesh3 Tdemi1 = movemesh3(Tdemi0,transfo=[x,y,-z],label=ref);//moitié inférieure
mesh3 Tdemi1rot = movemesh3(Tdemi1,transfo=[cospi5*x-sinpi5*y,sinpi5*x+cospi5*y,z],label=ref);//rotation de la moitié inférieure pour les emboiter

mesh3 Ticosaedre = Tdemi0+Tdemi1rot;
plot(cmm="Icosaedre",Ticosaedre,wait=1);

//=================================================================================
//Construction de la sphere 3D
//=================================================================================
real aa =RX, bb=RY, cc =RZ;
func metric = sqrt(aa*x*x+bb*y*y+cc*z*z);
mesh3 Th = movemesh3(Ticosaedre,transfo=[x/metric,y/metric,z/metric]);
mesh3 Thb=freeyams(Th,hmin=hsize,hmax=hsize,gradation=1.1);
return Thb;
}
real hsize=0.1;
mesh3 Thb=Ellipsoide20(1,1,1,hsize,1,1);
// Thb=freeyams(Thb,hmin=hsize,hmax=hsize,gradation=1.1);
plot(cmm="Thb",Thb,wait=1);

//medit("spheresurface",Th);
//savemesh(Th,"T.mesh");
//exec("ffmedit T.mesh");
real[int] domain = [0.,0.,0.,1,hsize^3/6];
mesh3 Th3sph=tetg(Thb,switch="paAAQYY",nbofregions=1,regionlist=domain);


 plot(cmm="sphere",Th3sph,wait=1);
