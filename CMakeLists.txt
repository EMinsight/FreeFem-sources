CMAKE_MINIMUM_REQUIRED(VERSION 3.0)

PROJECT(FreeFem++ C CXX)

SET(FREEFEM_VERSION 3.5)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules)

INCLUDE(ProcessorCount)
ProcessorCount(N)
IF(NOT N EQUAL 0)
  SET(CMAKE_BUILD_FLAGS -j${N})
ENDIF()

######################
# C++ COMPILER OPTIONS
######################

SET(CMAKE_CXX_STANDARD 11)
INCLUDE(CompilerManager)
INCLUDE(ModuleManager)

FILE(GLOB FEMLIB_SRC src/femlib/*.cpp)
FILE(GLOB_RECURSE FFLIB_SRC src/fflib/*.cpp)

######
# TEST
######

ENABLE_TESTING()

FILE(GLOB EXAMPLE_DIRECTORIES RELATIVE ${CMAKE_SOURCE_DIR} examples*)

FIND_PACKAGE(MPI)
IF(MPI_FOUND)
  ADD_CUSTOM_TARGET(check LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/examples++-mpi:${CMAKE_BINARY_DIR}/examples++-load ${CMAKE_SOURCE_DIR}/CheckAll "${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} 4 ${MPIEXEC_PREFLAGS} ${CMAKE_BINARY_DIR}/src/FreeFem++-mpi ")
ELSE(MPI_FOUND)
  ADD_CUSTOM_TARGET(check LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/examples++-load ${CMAKE_SOURCE_DIR}/CheckAll ${CMAKE_BINARY_DIR}/src/FreeFem++)
ENDIF(MPI_FOUND)

###########
# DOWNLOAD
##########

INCLUDE(FFInstallPackage)

IF(NOT ENABLE_DOWNLOAD)
  SET(ENABLE_DOWNLOAD False)
ENDIF(NOT ENABLE_DOWNLOAD)

ADD_SUBDIRECTORY(plugin)
ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(examples/misc)
ADD_SUBDIRECTORY(examples/3d)
ADD_SUBDIRECTORY(examples/bug)
ADD_SUBDIRECTORY(examples/examples)
ADD_SUBDIRECTORY(examples/eigen)
#ADD_SUBDIRECTORY(examples/plugin)
ADD_SUBDIRECTORY(examples/mpi)
ADD_SUBDIRECTORY(examples/other)
ADD_SUBDIRECTORY(examples/tutorial)

######################
# strversionnumber.cpp
######################

EXECUTE_PROCESS(COMMAND "date" OUTPUT_VARIABLE VersionFreeFemDate)
STRING(STRIP ${VersionFreeFemDate} VersionFreeFemDate)
FILE(WRITE src/fflib/strversionnumber.cpp
"// TODO: remove this block as soon as autoconf is removed from FreeFem++\n
#ifndef CMAKE\n
#include \"config-wrapper.h\"\n
#endif\n
\n
#include \"strversionnumber.hpp\" // [[file:strversionnumber.hpp]] \n
#include <cstdlib> \n
using namespace std;\n
#define TOSTRING1(i) #i \n
#define TOSTRING(i) TOSTRING1(i) \n
\n
//#include <sstream>\n
#include <cstdio>\n
using namespace std;\n
\n
double VersionNumber(){\n
  #define VersionFreeFempp ${FREEFEM_VERSION} // Generated by CMake \n
  return VersionFreeFempp;\n
}\n
\n
string StrVersionNumber(){\n
//  std::ostringstream buffer;\n
//  buffer.precision(8);\n
//  buffer<<VersionNumber();\n
  static char buffer[100];\n
  sprintf(buffer,\" %9f (date ' ${VersionFreeFemDate}')\",VersionNumber());\n
  return buffer; //.str()+\" (date ${VersionFreeFemDate})\" ;\n
}")

